buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.1"
  }
}
plugins {
    id 'java'
    id 'checkstyle'
    id "com.github.spotbugs" version "4.7.1"
}

// need utf-8 to get text with non-standard chars e.g. curly apostrophes used correctly 
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
	javaDoclet
}

dependencies {
    testImplementation 'org.concordion:cubano-concordion:1.1.0'

    testImplementation 'io.github.bonigarcia:webdrivermanager:4.4.3'
    
    testImplementation 'org.codejargon:fluentjdbc:1.3.1'
    
    testImplementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
    
    testImplementation group: 'org.hsqldb', name: 'hsqldb', version: '2.4.1'
    
     //Wiremock
    testImplementation "com.github.tomakehurst:wiremock:2.18.0"
    
    // JUnit
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'org.mockito:mockito-core:2.8.47'
    testImplementation 'com.github.stefanbirkner:system-rules:1.16.0'
}

checkstyle {
	ignoreFailures = true
	configDirectory = new File("${rootDir}/config/checkstyle")	
}

spotbugs {
	ignoreFailures = true	
}

test {
//    include '**/Example.*'
    
    // Pass through all supplied system properties - excluding those containing '.' as some of these system properties introduce JNA incompatibility issues
    // except for http. properties
    System.properties.each { k, v->
        if (!k.contains(".") || k.startsWith("http.")) {
            println "Passing system property $k: $v"
            systemProperty k, v
       	}
    }
	 
    // need utf-8 to get text with non-standard chars e.g. apostrophes comparing successfully 
    systemProperty 'file.encoding', 'UTF-8'

    // Logback Configuration
    if (System.getProperty('logback.configurationFile') != null) systemProperty 'logback.configurationFile', System.getProperty('logback.configurationFile')

    // Parallel Runner
	if (System.getProperty('concordion.run.threadCount') != null) {
		systemProperty 'concordion.extensions', 'org.concordion.ext.ParallelRunExtension'
		systemProperty 'concordion.run.threadCount', System.getProperty('concordion.run.threadCount')
	}
	
    systemProperty 'concordion.output.dir', "$reporting.baseDir/spec"
    outputs.upToDateWhen { false } // ensure the tests run each time, even if no changes to test code
    testLogging.showStandardStreams = true
	testLogging.showExceptions = true
	
	// Added to assist with logging in travis.
	testLogging {
        events "failed"
        exceptionFormat "full"
    }
}
